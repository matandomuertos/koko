volumes:
  transcode_plex:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  ollama:
    driver: local
  n8n_data:
    driver: local

networks:
  qbittorrent:
    driver: bridge
  gitea:
    driver: bridge
  uptime-kuma:
    driver: bridge
  koko-dashboard-ui:
    driver: bridge
  koko-dashboard-api:
    driver: bridge
  vaultwarden:
    driver: bridge
  homeassistant:
    driver: bridge
  monitoring:
    driver: bridge
  iperf3:
    driver: bridge
  test:
    driver: bridge
  ollama:
    driver: bridge
  portainer:
    driver: bridge
  n8n:
    driver: bridge

services:

  ### APPS ###
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Warsaw
      - WEBUI_PORT=8081
    volumes:
      - /bkp/docker/qbittorrentconfig:/config
      - /download/qbittorrent:/downloads
    networks:
      - qbittorrent
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qb.${DOMAIN}`) || Host(`qb.pub.${DOMAIN}`)"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8081"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=cloudflare"
      - "traefik.http.routers.qbittorrent.middlewares=qbittorrent-whitelist"
      - "traefik.http.middlewares.qbittorrent-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  plex:
    image: plexinc/pms-docker:latest
    container_name: plex
    restart: unless-stopped
    environment:
      - TZ=Europe/Warsaw
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - /bkp/docker/plexconfig:/config
      - transcode_plex:/transcode
      - /download:/download
    network_mode: host
    labels:
      - "traefik.enable=true" # Actually, it's not working without port (plex.${DOMAIN}:32400) because plex doesn't like reverse proxies
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`) || Host(`plex.pub.${DOMAIN}`)"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=cloudflare"

  gitea:
    image: gitea/gitea:1.23
    container_name: gitea
    restart: unless-stopped
    environment:
      - USER_UID=1000
      - USER_GID=1000
    volumes:
      - /bkp/docker/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - gitea
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`git.${DOMAIN}`) || Host(`git.pub.${DOMAIN}`)"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.http.routers.gitea.entrypoints=websecure"
      - "traefik.http.routers.gitea.tls.certresolver=cloudflare"
      - "traefik.http.routers.gitea.middlewares=gitea-whitelist"
      - "traefik.http.middlewares.gitea-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - /bkp/docker/uptime-kuma:/app/data
    networks:
      - uptime-kuma
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime-kuma.rule=Host(`kuma.${DOMAIN}`) || Host(`kuma.pub.${DOMAIN}`)"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=3001"
      - "traefik.http.routers.uptime-kuma.entrypoints=websecure"
      - "traefik.http.routers.uptime-kuma.tls.certresolver=cloudflare"
      - "traefik.http.routers.uptime-kuma.middlewares=uptime-kuma-whitelist"
      - "traefik.http.middlewares.uptime-kuma-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  koko-web:
    image: matandomuertos/koko-dashboard-web:latest
    container_name: koko-web
    restart: unless-stopped
    volumes:
      - /bkp/docker/urls.yml:/usr/share/nginx/html/config/urls.yml
    networks:
      - koko-dashboard-ui
      - koko-dashboard-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`koko.${DOMAIN}`) || Host(`koko.pub.${DOMAIN}`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=80"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.dashboard.service=dashboard"
      - "traefik.http.routers.dashboard.middlewares=dashboard-whitelist"
      - "traefik.http.middlewares.dashboard-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  koko-api:
    image: matandomuertos/koko-dashboard-api:latest
    container_name: koko-api
    restart: unless-stopped
    networks:
      - koko-dashboard-api
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  vaultwarden:
    image: vaultwarden/server:1.33.2-alpine
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      - WEBSOCKET_ENABLED=false
      - SIGNUPS_ALLOWED=false
    volumes:
      - /bkp/docker/vaultwarden:/data
    networks:
      - vaultwarden
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vw.${DOMAIN}`) || Host(`vw.pub.${DOMAIN}`)"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls.certresolver=cloudflare"
      - "traefik.http.routers.vaultwarden.middlewares=vaultwarden-whitelist"
      - "traefik.http.middlewares.vaultwarden-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /bkp/docker/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - portainer 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`) || Host(`portainer.pub.${DOMAIN}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.portainer.middlewares=portainer-whitelist"
      - "traefik.http.middlewares.portainer-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"
      - "traefik.http.routers.edge.rule=Host(`edge.${DOMAIN}`) || Host(`edge.pub.${DOMAIN}`)"
      - "traefik.http.services.edge.loadbalancer.server.port=8000"
      - "traefik.http.routers.edge.entrypoints=websecure"
      - "traefik.http.routers.edge.tls.certresolver=cloudflare"
      - "traefik.http.routers.edge.service=edge"
      - "traefik.http.routers.edge.middlewares=edge-whitelist"
      - "traefik.http.middlewares.edge-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    restart: unless-stopped
    environment:
      DISABLE_JEMALLOC: true
    expose:
      - 8123
    volumes:
      - /bkp/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
      - /dev/ttyUSB0:/dev/ttyUSB0
    privileged: true
    network_mode: host
    labels:
      - "traefik.enable=true" # Actually not using Traefik, it's node port in 8123
      - "traefik.http.routers.homeassistant.rule=Host(`homeassistant.${DOMAIN}`) || Host(`homeassistant.pub.${DOMAIN}`)"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
      - "traefik.http.routers.homeassistant.entrypoints=websecure"
      - "traefik.http.routers.homeassistant.tls.certresolver=cloudflare"

  timemachine:
    container_name: timemachine
    image: mbentley/timemachine:smb
    restart: unless-stopped
    network_mode: host
    environment:
      - TM_USERNAME=${TM_USER}
      - TM_GROUPNAME=${TM_GROUP}
      - PASSWORD=${TM_PASS}
      - TM_UID=1000
      - TM_GID=1000
      - SET_PERMISSIONS=false
      - VOLUME_SIZE_LIMIT=0
    volumes:
      - /bkp/docker/timemachine:/opt/${TM_USER}
    tmpfs:
      - /run/samba
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  rclone-mount:
    container_name: rclone-mount
    image: mumiehub/rclone-mount:v1.69.1
    restart: unless-stopped
    cap_add:
      - SYS_ADMIN
    security_opt:
      - 'apparmor:unconfined'
    volumes:
      - '/bkp/docker/rclone/config:/config'
      - '/rclone/gdrive:/mnt/mediaefs:shared'
    devices:
      - /dev/fuse
    environment:
      - 'RemotePath=gdrive:'
      - 'MountCommands=--allow-other --allow-non-empty --buffer-size 256M'
      - 'ConfigName=rclone.conf'

  ### Networking ###

  traefik:
    image: traefik:3.3.5
    container_name: traefik
    restart: always
    environment:
      - CF_DNS_API_TOKEN=${TRAEFIK_CF_DNS_API_TOKEN}
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=${TRAEFIK_RESOLVERS}"
      - "--certificatesresolvers.cloudflare.acme.storage=/certs/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
        #- "--accesslog=true"
        #- "--accesslog.filePath=/logs/access.log"
        #- "--accesslog.filters.statuscodes=200,300-308,403,404"
        #- "--accesslog.filters.retryattempts"
        #- "--accesslog.filters.minduration=10ms"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /bkp/docker/traefik/certs:/certs
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - qbittorrent
      - gitea
      - uptime-kuma
      - koko-dashboard-ui
      - koko-dashboard-api
      - vaultwarden
      - homeassistant
      - monitoring
      - iperf3
      - test
      - ollama
      - portainer
      - n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`tk.${DOMAIN}`) || Host(`tk.pub.${DOMAIN}`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.treafik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.middlewares=traefik-whitelist"
      - "traefik.http.middlewares.traefik-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  ### Monitoring ###

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=8192MB'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - /bkp/docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`) || Host(`prometheus.pub.${DOMAIN}`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
      - "traefik.http.routers.prometheus.middlewares=prometheus-whitelist"
      - "traefik.http.middlewares.prometheus-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    command: --config.file=/config/alertmanager.yml
    volumes:
      - /bkp/docker/monitoring/alertmanager.yml:/config/alertmanager.yml
      - alertmanager_data:/data
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`) || Host(`alertmanager.pub.${DOMAIN}`)"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=cloudflare"
      - "traefik.http.routers.alertmanager.middlewares=alertmanager-whitelist"
      - "traefik.http.middlewares.alertmanager-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - /bkp/docker/monitoring/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - /bkp/docker/monitoring/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - /bkp/docker/monitoring/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`) || Host(`grafana.pub.${DOMAIN}`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.routers.grafana.middlewares=grafana-whitelist"
      - "traefik.http.middlewares.grafana-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

  iperf3: # To use it, from client, run: `iperf3 -c koko`
    image: networkstatic/iperf3:latest
    container_name: iperf3
    restart: unless-stopped
    networks:
      - iperf3
    command: -s
    ports:
      - "5201:5201"

  ### Test ###

  test:
    image: nginxdemos/hello:latest
    container_name: test
    restart: unless-stopped
    networks:
      - test
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.test.rule=Host(`test.${DOMAIN}`) || Host(`test.pub.${DOMAIN}`)"
      - "traefik.http.services.test.loadbalancer.server.port=80"
      - "traefik.http.routers.test.entrypoints=websecure"
      - "traefik.http.routers.test.tls.certresolver=cloudflare"
      - "traefik.http.routers.test.middlewares=test-whitelist"
      - "traefik.http.middlewares.test-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  ### AI ####
  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ollama:/root/.ollama
    networks:
      - ollama
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.rule=Host(`ollama.${DOMAIN}`) || Host(`ollama.pub.${DOMAIN}`)"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"
      - "traefik.http.routers.ollama.entrypoints=websecure"
      - "traefik.http.routers.ollama.tls.certresolver=cloudflare"
      - "traefik.http.routers.ollama.middlewares=ollama-whitelist"
      - "traefik.http.middlewares.ollama-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

### TEST ###
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    networks:
      - n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`asdf.${DOMAIN}`) || Host(`asdf.pub.${DOMAIN}`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=cloudflare"
      - "traefik.http.routers.n8n.middlewares=n8n-whitelist"
      - "traefik.http.middlewares.n8n-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"
    environment:
      - N8N_HOST=asdf.${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_RUNNERS_ENABLED=true
      - NODE_ENV=production
      - WEBHOOK_URL=https://asdf.${DOMAIN}/
      - GENERIC_TIMEZONE=Europe/Warsaw
    volumes:
      - n8n_data:/home/node/.n8n


 ### OLD SERVICES ###
  # cftunnel:
  #   image: cloudflare/cloudflared:2023.5.1
  #   container_name: cftunnel
  #   restart: unless-stopped
  #   environment:
  #     - CF_TOKEN=${CF_TOKEN}
  #   command: tunnel --no-autoupdate run --token $CF_TOKEN

  # pihole:
  #  image: pihole/pihole:2023.01.10
  #  container_name: pihole
  #  restart: always
  #  environment:
  #    - TZ=Europe/Warsaw
  #    - WEBPASSWORD=${PIHOLE_WEBPASSWORD}
  #    - PIHOLE_DNS_=8.8.8.8;8.8.4.4
  #    - FTLCONF_LOCAL_IPV4=192.168.31.167
  #    - DNSMASQ_LISTENING=all
  #    - QUERY_LOGGING=false
  #  volumes:
  #    - /bkp/docker/pi-hole/pihole:/etc/pihole
  #    - /bkp/docker/pi-hole/dnsmasq:/etc/dnsmasq.d
  #  ports:
  #    - "53:53/tcp"
  #    - "53:53/udp"
  #  networks:
  #    - pihole
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}` || Host(`pihole.pub.${DOMAIN}`))"
  #    - "traefik.http.services.pihole.loadbalancer.server.port=80"
  #    - "traefik.http.routers.pihole.entrypoints=websecure"
  #    - "traefik.http.routers.pihole.tls.certresolver=cloudflare"
  #    - "traefik.http.routers.pihole.middlewares=pihole-whitelist"
  #    - "traefik.http.middlewares.pihole-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"

  #qbittorrent-vpn:
  #  image: binhex/arch-qbittorrentvpn
  #  container_name: qbittorrent-vpn
  #  restart: unless-stopped
  #  cap_add:
  #    - NET_ADMIN
  #  environment:
  #    - VPN_ENABLED=yes
  #    - VPN_USER=${NORDVPN_USER}
  #    - VPN_PASS=${NORDVPN_PASS}
  #    - VPN_PROV=custom
  #    - VPN_CLIENT=openvpn
  #    - ENABLE_STARTUP_SCRIPTS=no
  #    - LAN_NETWORK=${LAN_NETWORK}
  #    - DEBUG=true
  #    - PUID=1000
  #    - PGID=1000
  #  devices:
  #    - /dev/net/tun
  #  volumes:
  #    - /bkp/docker/qbittorrentconfig:/config
  #    - /download/qbittorrent:/data
  #    - /etc/localtime:/etc/localtime:ro
  #  networks:
  #    - qbittorrent
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.http.routers.qbittorrent.rule=Host(`qb.${DOMAIN}`) || Host(`qb.pub.${DOMAIN}`)"
  #    - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
  #    - "traefik.http.routers.qbittorrent.entrypoints=websecure"
  #    - "traefik.http.routers.qbittorrent.tls.certresolver=cloudflare"
  #    - "traefik.http.routers.qbittorrent.middlewares=qbittorrent-whitelist"
  #    - "traefik.http.middlewares.qbittorrent-whitelist.ipwhitelist.sourcerange=${WHITELIST_IP}"
